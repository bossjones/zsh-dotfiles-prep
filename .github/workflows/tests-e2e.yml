# tests.yml
name: CI-E2E
permissions:
  contents: read
on:
  push:
    branches:
      - master
      - main
    paths:
      - '.github/workflows/tests.yml'
      - 'bin/zsh-dotfiles-prereq-installer*'
      - 'Dockerfile-*'
  pull_request:
    branches:
      - main
      - master
    paths:
      - '.github/workflows/tests.yml'
      - 'bin/zsh-dotfiles-prereq-installer*'
      - 'Dockerfile-*'
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)
        required: false
        default: "false"
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number|| github.sha }}
  cancel-in-progress: true
env:
  REGISTRY: ghcr.io
  REGISTRY_IMAGE: ${{ github.repository_owner }}/zsh-dotfiles-prep

jobs:
  style:
    runs-on: ubuntu-22.04
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install shfmt
        run: brew install shfmt

      - run: contrib/style.sh

  determine_changes:
    name: Determine changes
    runs-on: macOS-latest
    permissions:
      pull-requests: read
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

  docker_tests:
    name: Test in ${{ matrix.container_name }} Container
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - container_name: Debian 12
            dockerfile: Dockerfile-debian-12
            image_tag: debian-12
          - container_name: Ubuntu 22.04
            dockerfile: Dockerfile-ubuntu-2204
            image_tag: ubuntu-2204
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          push: false
          load: true
          tags: zsh-dotfiles-prereq:${{ matrix.image_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Script in Container
        run: |
          # Run the container with the script
          docker run --name test-container zsh-dotfiles-prereq:${{ matrix.image_tag }}

          # Capture the exit code
          EXIT_CODE=$?

          # Print the script output
          echo "Container logs:"
          docker logs test-container

          if [ $EXIT_CODE -ne 0 ]; then
            echo "❌ Script exited with non-zero status: $EXIT_CODE"
            exit $EXIT_CODE
          fi

          echo "✅ Script completed successfully"

      - name: Verify Installation
        run: |
          # Create verification script
          cat > verify.sh << 'EOL'
          #!/bin/bash
          set -e

          echo "Verifying essential directories and files..."
          test -d ~/.asdf || true
          test -d ~/.pyenv || true
          test -d ~/.cargo || true
          test -d ~/.local/bin || true
          test -f ~/compat.bash || true
          test -f ~/compat.sh || true

          echo "Verifying environment setup..."
          source ~/compat.bash

          echo "Verifying tools are on PATH..."
          which pyenv || true
          which asdf || true
          which cargo || true
          which fnm || true
          which git || true

          echo "✅ All verifications passed!"
          EOL

          # Execute verification inside the container
          docker exec test-container bash -c "chmod +x /zsh-dotfiles-prep/verify.sh && cd /home/testuser && /zsh-dotfiles-prep/verify.sh"

      - name: Test Idempotence
        run: |
          echo "Running script a second time to test idempotence..."
          docker exec test-container bash -c "cd /zsh-dotfiles-prep && bin/zsh-dotfiles-prereq-installer-linux"

          # Re-run verification to ensure everything still works
          docker exec test-container bash -c "cd /home/testuser && /zsh-dotfiles-prep/verify.sh"

          echo "✅ Idempotence test passed!"

      - name: Setup tmate debug session
        uses: mxschmitt/action-tmate@v3
        if: ${{ failure() || (github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled == 'true') }}
        with:
          limit-access-to-actor: true

  macos_tests:
    name: Test on macOS
    runs-on: macOS-latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Cache Homebrew Bundler RubyGems
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.set-up-homebrew.outputs.gems-path }}
          key: ${{ runner.os }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
          restore-keys: ${{ runner.os }}-rubygems-

      - name: Install Homebrew Bundler RubyGems
        if: steps.cache.outputs.cache-hit != 'true'
        run: brew install-bundler-gems

      - name: Install macOS dependencies
        run: |
          brew install elvish fish zsh || echo "Failed to install some dependencies, continuing..."

      - name: First run of zsh-dotfiles-prereq-installer
        run: bin/zsh-dotfiles-prereq-installer
        env:
          ZSH_DOTFILES_PREP_CI: 1
          ZSH_DOTFILES_PREP_DEBUG: 1
          ZSH_DOTFILES_PREP_GITHUB_USER: bossjones
          ZSH_DOTFILES_PREP_SKIP_BREW_BUNDLE: 1
          ZSH_DOTFILES_PREP_SKIP_SOFTWARE_UPDATES: 1

      - name: Verify macOS installation
        run: |
          echo "Verifying macOS setup..."
          source ~/compat.bash

          which pyenv || true
          which asdf || true
          which brew || true
          which zsh || true

          echo "macOS verification successful!"

      - name: Second run of zsh-dotfiles-prereq-installer
        run: bin/zsh-dotfiles-prereq-installer
        env:
          ZSH_DOTFILES_PREP_CI: 1
          ZSH_DOTFILES_PREP_GITHUB_USER: bossjones
          ZSH_DOTFILES_PREP_SKIP_BREW_BUNDLE: 1
          ZSH_DOTFILES_PREP_SKIP_SOFTWARE_UPDATES: 1

      - name: Setup tmate debug session
        uses: mxschmitt/action-tmate@v3
        if: ${{ failure() || (github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled == 'true') }}
        with:
          limit-access-to-actor: true

  publish_containers:
    name: Build and Publish Container Images
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [docker_tests, macos_tests]
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        include:
          - name: Debian 12
            dockerfile: Dockerfile-debian-12
            platform: linux/amd64,linux/arm64
            tag: debian-12
          - name: Ubuntu 22.04
            dockerfile: Dockerfile-ubuntu-2204
            platform: linux/amd64,linux/arm64
            tag: ubuntu-2204
    env:
      REGISTRY: ghcr.io
      REGISTRY_IMAGE: ${{ github.repository_owner }}/zsh-dotfiles-image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ matrix.tag }}
            type=raw,value=${{ matrix.tag }}-${{ github.sha }}
            type=raw,value=latest,enable=${{ matrix.tag == 'debian-12' }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate Artifact Attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}
          subject-digest: ${{ steps.build-and-push.outputs.digest }}
          push-to-registry: true

  # Create a multi-platform merged manifest - similar to your authorization service example
  merge_platforms:
    name: Merge Platform Images
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: publish_containers
    env:
      REGISTRY: ghcr.io
      REGISTRY_IMAGE: ${{ github.repository_owner }}/zsh-dotfiles-image
    permissions:
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create merged manifest
        run: |
          echo "Validate registry image name"
          if [[ "${{ env.REGISTRY_IMAGE }}" =~ [^a-zA-Z0-9_\-\.] ]]; then
            echo "Invalid registry image name"
            exit 1
          fi

          echo "Create a merged manifest with all platforms/images"
          docker buildx imagetools create \
            -t ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}:latest \
            ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}:debian-12 \
            ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}:ubuntu-2204

      - name: Inspect merged image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}:latest
