# tests.yml
name: CI-E2E
on:
  push:
    branches:
      - master
      - main
    paths:
      - '.github/workflows/tests.yml'
      - 'bin/zsh-dotfiles-prereq-installer*'
      - 'Dockerfile-*'
  pull_request:
    branches:
      - main
      - master
    paths:
      - '.github/workflows/tests.yml'
      - 'bin/zsh-dotfiles-prereq-installer*'
      - 'Dockerfile-*'
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)
        required: false
        default: "false"
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number|| github.sha }}
  cancel-in-progress: true

jobs:
  style:
    runs-on: ubuntu-22.04
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install shfmt
        run: brew install shfmt

      - run: contrib/style.sh

  determine_changes:
    name: Determine changes
    runs-on: macOS-latest
    permissions:
      pull-requests: read
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

  linux_installer_tests:
    name: Test on ${{ matrix.os_display_name }}
    runs-on: ubuntu-latest
    container: ${{ matrix.container_image }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os_display_name: Ubuntu-22.04
            container_image: ubuntu:22.04
          - os_display_name: Debian-12
            container_image: debian:12
    steps:
      - name: Install prerequisites
        run: |
          apt-get update
          apt-get install -y git curl sudo ca-certificates wget gnupg lsb-release apt-transport-https

      - name: Set up Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Verify script exists
        run: |
          ls -la bin/
          test -f bin/zsh-dotfiles-prereq-installer-linux || true
          chmod +x bin/zsh-dotfiles-prereq-installer-linux

      - name: First run of zsh-dotfiles-prereq-installer-linux
        run: bin/zsh-dotfiles-prereq-installer-linux
        env:
          ZSH_DOTFILES_PREP_CI: 1
          ZSH_DOTFILES_PREP_DEBUG: 1
          ZSH_DOTFILES_PREP_GITHUB_USER: bossjones
          ZSH_DOTFILES_PREP_SKIP_BREW_BUNDLE: 1

      - name: Verify first run results
        run: |
          echo "Verifying essential directories and files..."
          test -d ~/.asdf || true
          test -d ~/.pyenv || true
          test -d ~/.cargo || true
          test -d ~/.local/bin || true
          test -f ~/compat.bash || true
          test -f ~/compat.sh || true

          echo "Verifying environment setup..."
          source ~/compat.bash

          echo "Verifying core tools..."
          # Use which instead of command -v for more verbose output
          which pyenv || true
          which asdf || true
          which cargo || true
          which zsh || true
          which git || true

          echo "Verification successful!"

      - name: Second run (idempotence test)
        run: bin/zsh-dotfiles-prereq-installer-linux
        env:
          ZSH_DOTFILES_PREP_CI: 1
          ZSH_DOTFILES_PREP_GITHUB_USER: bossjones
          ZSH_DOTFILES_PREP_SKIP_BREW_BUNDLE: 1

      - name: Verify shell integration
        run: |
          echo "Testing shell integration..."
          bash -c "source ~/compat.bash &&
                   echo 'Testing pyenv:' && which pyenv &&
                   echo 'Testing asdf:' && which asdf &&
                   echo 'Testing fnm:' && which fnm || true"
          echo "Shell integration test complete!"

      # Debug with tmate if needed
      - name: Setup tmate debug session
        uses: mxschmitt/action-tmate@v3
        if: ${{ failure() || (github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled == 'true') }}
        with:
          limit-access-to-actor: true

  macos_tests:
    name: Test on macOS
    runs-on: macOS-latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Cache Homebrew Bundler RubyGems
        id: cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.set-up-homebrew.outputs.gems-path }}
          key: ${{ runner.os }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
          restore-keys: ${{ runner.os }}-rubygems-

      - name: Install Homebrew Bundler RubyGems
        if: steps.cache.outputs.cache-hit != 'true'
        run: brew install-bundler-gems

      - name: Install macOS dependencies
        run: |
          brew install elvish fish zsh || echo "Failed to install some dependencies, continuing..."

      - name: First run of zsh-dotfiles-prereq-installer
        run: bin/zsh-dotfiles-prereq-installer
        env:
          ZSH_DOTFILES_PREP_CI: 1
          ZSH_DOTFILES_PREP_DEBUG: 1
          ZSH_DOTFILES_PREP_GITHUB_USER: bossjones
          ZSH_DOTFILES_PREP_SKIP_BREW_BUNDLE: 1
          ZSH_DOTFILES_PREP_SKIP_SOFTWARE_UPDATES: 1

      - name: Verify macOS installation
        run: |
          echo "Verifying macOS setup..."
          source ~/compat.bash

          which pyenv || true
          which asdf || true
          which brew || true
          which zsh || true

          echo "macOS verification successful!"

      - name: Second run of zsh-dotfiles-prereq-installer
        run: bin/zsh-dotfiles-prereq-installer
        env:
          ZSH_DOTFILES_PREP_CI: 1
          ZSH_DOTFILES_PREP_GITHUB_USER: bossjones
          ZSH_DOTFILES_PREP_SKIP_BREW_BUNDLE: 1
          ZSH_DOTFILES_PREP_SKIP_SOFTWARE_UPDATES: 1

      - name: Setup tmate debug session
        uses: mxschmitt/action-tmate@v3
        if: ${{ failure() || (github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled == 'true') }}
        with:
          limit-access-to-actor: true

  # # Example of how to create combined container images inspired by authorization_service.yaml
  # build_container_image:
  #   name: Build Container Image
  #   # Only run this job on main branch pushes to demonstrate container builds
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   runs-on: ubuntu-latest
  #   needs: [linux_installer_tests, macos_tests]
  #   env:
  #     REGISTRY: ghcr.io
  #     REGISTRY_IMAGE: ${{ github.repository_owner }}/zsh-dotfiles-image
  #   permissions:
  #     contents: read
  #     packages: write
  #     id-token: write
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3

  #     - name: Log into GitHub Container Registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY}}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Extract metadata for Docker
  #       id: meta
  #       uses: docker/metadata-action@v5
  #       with:
  #         images: ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}
  #         tags: |
  #           type=ref,event=branch
  #           type=sha,format=short

  #     - name: Build and push Docker image
  #       id: build-and-push
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: .
  #         # Example Dockerfile that would use the zsh-dotfiles-prereq-installer-linux
  #         # You would need to create this Dockerfile in your repository
  #         file: ./Dockerfile
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}

  #     - name: Generate Artifact Attestation
  #       uses: actions/attest-build-provenance@v2
  #       with:
  #         subject-name: ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}
  #         subject-digest: ${{ steps.build-and-push.outputs.digest }}
  #         push-to-registry: true


  publish_containers:
    name: Build and Publish Container Images
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [docker_tests, macos_tests]
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        include:
          - name: Debian 12
            dockerfile: Dockerfile-debian-12
            platform: linux/amd64,linux/arm64
            tag: debian-12
          - name: Ubuntu 22.04
            dockerfile: Dockerfile-ubuntu-2204
            platform: linux/amd64,linux/arm64
            tag: ubuntu-2204
    env:
      REGISTRY: ghcr.io
      REGISTRY_IMAGE: ${{ github.repository_owner }}/zsh-dotfiles-image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=${{ matrix.tag }}
            type=raw,value=${{ matrix.tag }}-${{ github.sha }}
            type=raw,value=latest,enable=${{ matrix.tag == 'debian-12' }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate Artifact Attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}
          subject-digest: ${{ steps.build-and-push.outputs.digest }}
          push-to-registry: true

  # Create a multi-platform merged manifest - similar to your authorization service example
  merge_platforms:
    name: Merge Platform Images
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: publish_containers
    env:
      REGISTRY: ghcr.io
      REGISTRY_IMAGE: ${{ github.repository_owner }}/zsh-dotfiles-image
    permissions:
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create merged manifest
        run: |
          # Create a merged manifest with all platforms/images
          docker buildx imagetools create \
            -t ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}:latest \
            ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}:debian-12 \
            ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}:ubuntu-2204

      - name: Inspect merged image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.REGISTRY_IMAGE }}:latest
