# tests.yml
name: CI
on:
  push:
    branches:
      - master
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  #  # https://docs.github.com/en/webhooks-and-events/webhooks/webhook-events-and-payloads#workflow_dispatch
  # workflow_dispatch:
  #  # Allow this workflow to be run manually (pushing to testpypi instead of pypi)
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)
        required: false
        default: "false"
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number|| github.sha }}
  cancel-in-progress: true
jobs:
  style:
    runs-on: ubuntu-22.04
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # OR "2" -> To retrieve the preceding commit.
          persist-credentials: false

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install shfmt
        run: brew install shfmt

      - run: contrib/style.sh

  # # https://github.com/astral-sh/uv/blob/75c26229a2d8a9c2f249fd79f5fcf7b4d9ac77bb/.github/workflows/ci.yml#L88

  tests:
    name: Test on ${{ matrix.os_display_name }}
    runs-on: ${{ matrix.runner }}
    # Define the container for Docker jobs. This will be null/empty for macOS.
    container: ${{ matrix.container_image }}
    permissions:
      contents: read
    strategy:
      fail-fast: false # Continue other jobs in matrix even if one fails
      matrix:
        include:
          # - os: macOS
          #   runner: macOS-latest
          # - os: Linux
          #   runner: ubuntu-22.04
          # # - os: Linux
          # #   runner: ubuntu-22.04
          # # - os: Linux
          # #   runner: ubuntu-latest
          # #   workdir: /github/home
          # #   container: '{"image": "ghcr.io/homebrew/ubuntu22.04:master", "options": "--user=linuxbrew"}'
          - os_display_name: macOS
            runner: macOS-latest
            is_docker: false
            # container_image: null # Not needed, will be empty by default
          - os_display_name: Ubuntu-22.04 (Docker)
            runner: ubuntu-latest # Host for Docker
            container_image: ubuntu:22.04
            is_docker: true
          - os_display_name: Debian-12 (Docker)
            runner: ubuntu-latest # Host for Docker
            container_image: debian:12 # You can use debian:bookworm or debian:12-slim
            is_docker: true
    defaults:
      run:
        shell: bash
        # working-directory: ${{ matrix.workdir || github.workspace }}
        working-directory: ${{ github.workspace }}
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      # macOS specific setup steps
      - name: Set up Homebrew (macOS)
        id: set-up-homebrew # id is used by cache step
        uses: Homebrew/actions/setup-homebrew@master
        if: matrix.is_docker == false

      - name: Cache Homebrew Bundler RubyGems (macOS)
        id: cache # id is used by next step
        uses: actions/cache@v4 # Updated to v4
        if: matrix.is_docker == false && steps.set-up-homebrew.outputs.gems-path
        with:
          path: ${{ steps.set-up-homebrew.outputs.gems-path }}
          key: ${{ runner.os }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
          restore-keys: ${{ runner.os }}-rubygems-

      - name: Install Homebrew Bundler RubyGems (macOS)
        if: matrix.is_docker == false && steps.set-up-homebrew.outputs.gems-path && steps.cache.outputs.cache-hit != 'true'
        run: brew install-bundler-gems

      - name: Install shell dependencies (macOS)
        if: matrix.is_docker == false
        run: |
          brew install elvish fish zsh || echo "Failed to install some macOS shell dependencies, continuing..."

      - name: Install shell dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          # Install shells and their documentation
          sudo apt-get install -y \
            elvish \
            fish \
            zsh \
            zsh-doc \
            manpages \
            manpages-dev

      # Allow debugging with tmate
      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}
        with:
          # Use registered public SSH key(s)
          # If you have registered one or more public SSH keys with your GitHub profile, tmate will be started such that only those keys are authorized to connect, otherwise anybody can connect to the tmate session. If you want to require a public SSH key to be installed with the tmate session, no matter whether the user who started the workflow has registered any in their GitHub profile, you will need to configure the setting limit-access-to-actor to true, like so:
          limit-access-to-actor: true

      - name: Run bin/zsh-dotfiles-prereq-installer
        run: bin/zsh-dotfiles-prereq-installer
        env:
          ZSH_DOTFILES_PREP_CI: 1
          ZSH_DOTFILES_PREP_DEBUG: 1
          # NOTE: Skip Brew bundle for now, speed up tests
          ZSH_DOTFILES_PREP_GITHUB_USER: bossjones
          ZSH_DOTFILES_PREP_SKIP_BREW_BUNDLE: 1
        if: matrix.os_display_name == 'macOS'

      - name: Rerun bin/zsh-dotfiles-prereq-installer
        run: bin/zsh-dotfiles-prereq-installer
        env:
          ZSH_DOTFILES_PREP_CI: 1
          ZSH_DOTFILES_PREP_GITHUB_USER: bossjones
          ZSH_DOTFILES_PREP_SKIP_BREW_BUNDLE: 1
        if: matrix.os_display_name == 'macOS'

      - name: Run bin/zsh-dotfiles-prereq-installer-linux
        run: bin/zsh-dotfiles-prereq-installer-linux
        env:
          ZSH_DOTFILES_PREP_CI: 1
          ZSH_DOTFILES_PREP_DEBUG: 1
          # NOTE: Skip Brew bundle for now, speed up tests
          ZSH_DOTFILES_PREP_GITHUB_USER: bossjones
          ZSH_DOTFILES_PREP_SKIP_BREW_BUNDLE: 1
        if: matrix.os_display_name == 'Linux'

      - name: Rerun bin/zsh-dotfiles-prereq-installer-linux
        run: bin/zsh-dotfiles-prereq-installer-linux
        env:
          ZSH_DOTFILES_PREP_CI: 1
          ZSH_DOTFILES_PREP_GITHUB_USER: bossjones
          ZSH_DOTFILES_PREP_SKIP_BREW_BUNDLE: 1
        if: matrix.os_display_name == 'Linux'
